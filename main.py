import json
import requests
import pyttsx3
import datetime
import queue
import sounddevice as sd
import vosk
import os

# üì¢ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏
engine = pyttsx3.init()
engine.setProperty('rate', 160)

def speak(text):
    print("–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç:", text)
    engine.say(text)
    engine.runAndWait()

# üéô –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥–µ–ª–∏ Vosk
MODEL_PATH = "vosk-model-small-ru-0.22"

if not os.path.exists(MODEL_PATH):
    speak("–ú–æ–¥–µ–ª—å Vosk –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    exit(1)

model = vosk.Model(MODEL_PATH)
q = queue.Queue()

def callback(indata, frames, time, status):
    if status:
        print(status)
    q.put(bytes(indata))

def listen():
    with sd.RawInputStream(samplerate=16000, blocksize=8000, dtype='int16',
                           channels=1, callback=callback):
        recognizer = vosk.KaldiRecognizer(model, 16000)
        while True:
            data = q.get()
            if recognizer.AcceptWaveform(data):
                result = json.loads(recognizer.Result())
                return result.get("text", "")

# üåê –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤
def get_holidays(country="GB", year=2020):
    url = f"https://date.nager.at/api/v2/publicholidays/{year}/{country}"
    try:
        response = requests.get(url)
        response.raise_for_status()
        return response.json()
    except Exception as e:
        speak("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")
        print("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:", e)
        return []

# üß† –ì–ª–∞–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
def main():
    country = "GB"
    year = 2020
    speak(f"–ó–∞–≥—Ä—É–∂–∞—é –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ {year} –≥–æ–¥–∞ –¥–ª—è —Å—Ç—Ä–∞–Ω—ã {country}.")
    holidays = get_holidays(country, year)

    if not holidays:
        return

    while True:
        speak("–°–ª—É—à–∞—é –∫–æ–º–∞–Ω–¥—É.")
        command = listen()
        print("–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ:", command)

        if "–ø–µ—Ä–µ—á–∏—Å–ª–∏—Ç—å" in command:
            for h in holidays:
                speak(h["localName"])

        elif "—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å" in command:
            with open("holidays.txt", "w", encoding="utf-8") as f:
                for h in holidays:
                    f.write(h["localName"] + "\n")
            speak("–°–ø–∏—Å–æ–∫ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ —Ñ–∞–π–ª.")

        elif "–¥–∞—Ç—ã" in command:
            with open("holidays_full.txt", "w", encoding="utf-8") as f:
                for h in holidays:
                    f.write(f'{h["date"]} ‚Äî {h["localName"]}\n')
            speak("–î–∞—Ç—ã –∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")

        elif "–±–ª–∏–∂–∞–π—à–∏–π" in command:
            today = datetime.date.today()
            upcoming = [h for h in holidays if datetime.date.fromisoformat(h["date"]) >= today]
            if upcoming:
                nearest = min(upcoming, key=lambda x: datetime.date.fromisoformat(x["date"]))
                speak(f"–ë–ª–∏–∂–∞–π—à–∏–π –ø—Ä–∞–∑–¥–Ω–∏–∫ {nearest['localName']} {nearest['date']}")
            else:
                speak("–ù–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤.")

        elif "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ" in command:
            speak(f"–í—Å–µ–≥–æ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤: {len(holidays)}")

        elif "–≤—ã—Ö–æ–¥" in command or "—Å—Ç–æ–ø" in command:
            speak("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break

        else:
            speak("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ü–æ–≤—Ç–æ—Ä–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")

if __name__ == "__main__":
    main()














